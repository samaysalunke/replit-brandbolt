To build a simple LinkedIn authentication system that logs users in and pulls their profile data, follow these steps:

## Step 1: Set up your project

Start with a simple React application:

```bash
npx create-react-app linkedin-auth
# or
yarn create vite linkedin-auth --template react-ts
```

## Step 2: Install necessary dependencies

```bash
npm install @supabase/supabase-js react-router-dom
```

## Step 3: Create a Supabase project

1. Go to https://supabase.com/ and create a new project
2. Under Authentication settings, enable "LinkedIn" as an OAuth provider
3. Configure the LinkedIn provider with your LinkedIn App credentials
4. Set your callback URL to `http://localhost:3000/auth/callback`

## Step 4: Create a LinkedIn Developer App

1. Go to https://www.linkedin.com/developers/
2. Create a new app
3. Under OAuth 2.0 settings:
   - Add the redirect URL: `http://localhost:3000/auth/callback`
   - Request these scopes: `openid profile email`
4. Copy your Client ID and Client Secret

## Step 5: Set up environment variables

Create a `.env` file:

```
REACT_APP_SUPABASE_URL=your_supabase_url
REACT_APP_SUPABASE_ANON_KEY=your_supabase_anon_key
```

## Step 6: Create the Supabase client

Create a file `src/lib/supabase.js`:

```javascript
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || process.env.REACT_APP_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || process.env.REACT_APP_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables');
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey);
```

## Step 7: Set up routing

In `src/App.js`:

```jsx
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import Home from './pages/Home';
import AuthCallback from './pages/AuthCallback';
import Dashboard from './pages/Dashboard';

function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/auth/callback" element={<AuthCallback />} />
        <Route path="/dashboard" element={<Dashboard />} />
      </Routes>
    </BrowserRouter>
  );
}

export default App;
```

## Step 8: Create the Home page with login button

In `src/pages/Home.jsx`:

```jsx
import { supabase } from '../lib/supabase';

function Home() {
  const handleLinkedInLogin = async () => {
    await supabase.auth.signInWithOAuth({
      provider: 'linkedin',
      options: {
        redirectTo: `${window.location.origin}/auth/callback`,
        scopes: 'openid profile email'
      }
    });
  };

  return (
    <div className="container">
      <h1>LinkedIn Auth Demo</h1>
      <button onClick={handleLinkedInLogin}>
        Connect with LinkedIn
      </button>
    </div>
  );
}

export default Home;
```

## Step 9: Create the auth callback page

In `src/pages/AuthCallback.jsx`:

```jsx
import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../lib/supabase';

function AuthCallback() {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    const handleCallback = async () => {
      try {
        setLoading(true);
        
        // Get the session from the URL
        const { data: { session }, error: sessionError } = await supabase.auth.getSession();
        
        if (sessionError) throw sessionError;
        if (!session) throw new Error('No session found');
        
        console.log('Authentication successful!');
        // Navigate to the dashboard
        navigate('/dashboard');
      } catch (error) {
        console.error('Authentication error:', error);
        setError(error.message);
        // Redirect to home page after error
        setTimeout(() => navigate('/'), 3000);
      } finally {
        setLoading(false);
      }
    };

    handleCallback();
  }, [navigate]);

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  return <div>Authentication successful! Redirecting...</div>;
}

export default AuthCallback;
```

## Step 10: Create the Dashboard to display LinkedIn data

In `src/pages/Dashboard.jsx`:

```jsx
import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../lib/supabase';

function Dashboard() {
  const [user, setUser] = useState(null);
  const [profile, setProfile] = useState(null);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        setLoading(true);
        
        // Get current user
        const { data: { user }, error: userError } = await supabase.auth.getUser();
        
        if (userError) throw userError;
        if (!user) {
          // Not authenticated, redirect to login
          navigate('/');
          return;
        }
        
        setUser(user);
        console.log('User data:', user);
        
        // Extract profile data from user metadata
        const profile = {
          id: user.id,
          name: user.user_metadata?.full_name || '',
          email: user.email || '',
          picture: user.user_metadata?.avatar_url || '',
          // Add any other fields you can extract from the metadata
        };
        
        setProfile(profile);
      } catch (error) {
        console.error('Error fetching user data:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchUserData();
  }, [navigate]);

  const handleLogout = async () => {
    await supabase.auth.signOut();
    navigate('/');
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <div className="container">
      <h1>Dashboard</h1>
      
      {profile && (
        <div className="profile">
          <h2>LinkedIn Profile</h2>
          {profile.picture && (
            <img 
              src={profile.picture} 
              alt="Profile" 
              style={{ width: 100, height: 100, borderRadius: '50%' }} 
            />
          )}
          <p><strong>Name:</strong> {profile.name}</p>
          <p><strong>Email:</strong> {profile.email}</p>
          
          <h3>Raw User Metadata</h3>
          <pre>{JSON.stringify(user?.user_metadata, null, 2)}</pre>
        </div>
      )}
      
      <button onClick={handleLogout}>Log Out</button>
    </div>
  );
}

export default Dashboard;
```

## Key points to remember:

1. **LinkedIn Developer App**: Make sure your LinkedIn app has the correct redirect URLs and scopes.

2. **Supabase Configuration**: Ensure LinkedIn OAuth is enabled in your Supabase authentication settings.

3. **Handling Authentication Flow**:
   - The login button redirects to LinkedIn
   - LinkedIn redirects back to your callback URL
   - The callback page handles the session and redirects to the dashboard
   - The dashboard extracts and displays the profile data

4. **Scopes**: The basic `openid profile email` scopes give limited access. If you need more data (like posts, connections), you'll need additional scopes and might need to apply for LinkedIn partner program access.

5. **Testing**: Monitor your browser console while testing the authentication flow to catch any issues.

This implementation gives you a basic LinkedIn authentication flow that pulls the user's profile data that's available through the standard OAuth scopes.